Something about me

I have studied Biomedical Engineering as a bachelor on the UT. Near the end of this study I realized I was way better at data processing/programming than at memorizing medical facts, so I started the Master Robotics with Algorithms and software AI as specialization. In my free time I mostly play videogames and skateboard every now and then. Historically I have not tinkered a lot, though recently I have found a big stick in the park next to my home, which I am turning into a container to plant a plant in. Also I have been entertaining the idea of growing a plant inside a DIY camera, though this is somewhat of a long term project. For this I have bought most necessary parts, like a lens + camera and raspberry pi, but the last parts have taken a lot of time to arrive.

For my study I have tinkered around with programming a lot. I mostly prefer Python and MATLAB, though I have gained some experience using HTML and C++ recently (I will also generate this site using HTML to practice more, hopefully that will go well...).
I am somewhat interested in woodworking, since this could allow me to make nice furniture tailored towards my needs. In the past I have created some floating shelves to facilitate more storage. The leftover wood of this project can be seen in front of my clauset, though i have not thought up a good use for this.
With tinkering, I usually am not very perfectionistic. As long as i finish a project I am happy, since I will have learned something and my next project will likely profit from the added experience.

1) Definition of tinkering 
definition tinkering according to Cambridge Dictionary:
to make small changes to something, especially in an attempt to repair or improve it

definition of trial and error according to Cambridge Dictionary:
a way of achieving an aim or solving a problem by trying a number of different methods and learning from the mistakes that you make: 

definition of brainstorming according to Cambridge Dictionary:
an activity or business method in which a group of people meet to suggest a lot of new ideas for possible development

tinkering and trial and error both aim to solve a problem, thought the dictionary says tinkering makes small changes and trial and error tried a number of different methods to achieve a solution. Brainstorming seems somewhat different, as it is the act of finding a solution to a problem (without immediately solving the problem), not the act of solving the problem. 

When asking ChatGPT the following question:
	"what is the definition of tinkering, trial and error and brainstorming and what is the difference between them?"
It responded with:
Here are the definitions and differences between tinkering, trial and error, and brainstorming:
Definitions:
    "Tinkering – The process of experimenting or playing around with something to figure out how it works or improve it. It often involves hands-on, informal exploration without a fixed plan.
    Trial and Error – A method of problem-solving that involves testing different solutions until the correct one is found. If one approach fails, another is tried until success is achieved.
    Brainstorming – A creative thinking process where multiple ideas or solutions are generated, often in a group setting, without immediate judgment or filtering.

Differences:
Concept	Key Feature	Purpose
Tinkering		Hands-on, playful experimentation	To explore, learn, or improve something informally
Trial and Error		Repeated attempts with adjustments	To find a successful solution through testing
Brainstorming		Idea generation, often collaborative	To create new ideas or solve a problem creatively

    Tinkering is more about curiosity and informal learning.
    Trial and Error is structured towards solving a specific problem by testing different approaches.
    Brainstorming is about generating many ideas without immediately testing them."

2) Itech project case
As I study robotics, I will chose a project case within robotics which aims to respond interactively to sensor data. The project case will be one I have worked on myself in a different course, Advanced Software Design for Robotics. Here, it was the goal to actuate the wheels of a robot to follow a green ball which is seen by a camera. Five technical hurdles are listed below.

- The focus of this project was to create a very reliable system. This means the system should respond in real-time to changes in green ball position, always. To achieve this real-time behaviour, the Xenomai add-on to the Linux kernel was used. This is installed on one of the CPU cores to specialize in real-time processing. As Xenomai is a very well defined system with build in commands, everything either gives an error or straightup works. This means educated guessing is possible, but reading documentation carefully is the best approach. This means this technical hurdle is not easily solvable by tinkering.
- Xenomai communicates with C++ programs which run on the normal Linux cores. As someone with no experience in C++ programming, this turned out to be one of the biggest technical hurdles for me. Once you 'speak' C++, you can write some code and troubleshoot any errors as they come up. This is iterated educated guessing, which is a part of tinkering. However it still lacks the physical part of tinkering, so i'd still say this problem is not very suited for tinkering (also in practice i let AI do most of the programming, as i otherwise would have needed to learn C++ on top of the normal course contents).
- Another technical hurdle is that all this needs to happen on a Linux system. For anyone unfamiliar with virtual machines and Linux bash terminals, this would be majorly confusing. Luckily I already had experience with this, so this was the easy part. This is still a digital problem with a very clear good or bad outcome (either it works or it gives an error). Due to the same logic as mentioned above, this is not very suitable for tinkering.
- While developing code to be run on the robot, we did not have access to the robot. Only during specific moments we could run our code on the real robot. This means we needed a way to test whether our code works digitally. Part of this was solved by developing ros2 nodes which behave consistently as long as they receive a proper input. However, this did not apply to the code which needed to run on the Xenomai CPU core. This meant some of our code we could only check on the robot itself. Luckily, with AI and proper programming we could check in advance whether we expected there to be any errors. Due to the problems mentioned above this is not very suitable for tinkering. On top of that, for this technical hurdle you don't even know whether you get an error or not, so trial and error is not possible.
- To actuate the wheels, a control system is needed. Initally, for this project we used a very simple controller, which worked fine. However, in practice a PID controller is more reliable to get a constant speed. These controllers can be complex to design, so this part of the project was done by the teacher. As 'scaffolding' we received a control system via canvas, which we could use in place of our simple controller. This technical hurdle was solved by proper scaffolding by the supervisor, so no tinkering was needed.

3) Tinkerspiration
Online sources of tinkerspiration:
-AI chatbots
-Youtube
-Instructables
-Pinterest
-Google

Physical sources of tinkerspiration:
-Friends
-Random research items on display in Utwente
-Designlab (which is arranged with tinkering in mind)
-Sitting on the balcony, looking outside and listening to birds
-Taking a walk (touching grass)

Personally I mostly use AI in the orientation phase of tinkering, to check whether an idea i have is feasible and has been done before. If it has been done before, I move to Youtube, since someone probably has already made a very clear video explaining my idea. Instructibles, pinterest and Google i dont use often for tinkerspiration. As for physical sources of tinkerspiration, i think sitting on my balcony listening to birds is the most effective. I always get hyped to do something when i'm sitting there. For instance my idea to grow a plant inside a DIY camera I got while sitting on my balcony. Aside from that I have never gotten a tinkering idea from other physical sources with which i actually wanted to do something. I am not actively looking for more tinkerspiration, since I do not have the time to even finish my DIY plant camera. 

4) Tinkering domains
5 Tinkering domains, challenges or settings are listed below.
- The challenge to create any building block which is able to attach to itself. This is a very tinkerable challenge, since it has a clear prompt which allows for a very broad range of outcomes. If you ask 100 people to do this challenge, you would likely get a lot of different building blocks. The challenge involves brainstorming a concept, building it and perhaps iterating the process with trial and error. I would like to apply tinkering to this challenge to get to a building block which i think is not very boring.
- A soapbox race. This is also very tinkerable, just like the challenge to create any building block. While trial and error is not very applicable due to the race only being once, it is still possible to drive around a bit before the race to for instance test out the wheels. I have actually participated in a soapbox race with my fraternity before, the soapbox is displayed in Figure 2. I would like to apply tinkering to this challenge because it will allow for a better designed end product. In general, soapbox races are cool because they bring a lot of people together to tinker around, and it allows for a lot of social interaction while tinkering.
- Creating a DIY camera in which you can grow a plant. While part of this challenge is creating a digital interface with the camera through the raspberry pi (and thus not very tinkerable), the part of buying and connecting all the hardware is somewhat tinkerable, since it is a design problem. Still, the individual components cost a lot, so i would not like to break anything or make faults. However, due to my lack of knowledge in connecting hardware components to raspberry pies, I think I will have to tinker around a bit anyways to make sure everything connects properly, because it will be unlikely my initial plan will work.
- Robotics. This is the domain of my Master, and if i am 'Mastering Tinkering' anyways, I might as well apply it to my own domain. The part of robotics I find most interesting, is the software and AI side, which is by design not physical. This contradicts the definition of tinkering given in the lectures, though educated trial and error is still something i resort to whenever i have no idea how to fix an error. The physical side of robotics (as in robotic arm design and control) might be more suitable for tinkering. This is a more physical process, but trial and error is slightly harder to realize due to costly materials and the complexity of the needed calculations.
- Interactive Technology. This domain i have understood as most projects which rely on sensors to create interactive behaviour. This resembles robotics, in that it has a physical and software part (also most robotics problems are part of interactive technology, since they rely heavily on sensors). Just like with Robotics, the physical part might be costly, which could make trial and error hard to realize. At the same time, the software side lacks the physicality needed for tinkering.





Tinkering process for building blocks:
I think the building blocks I create should have some kind of meaning or interesting shape, since otherwise they would be somewhat boring blocks to me. The pieces should also fit together, which resulted in some constraints on the final product. At first I was brainstorming about complex 3d shapes, but I realised this was hard to think about and hard to draw properly, as i have little to no experience with 3d software. I thought of some kind of octopus like block, as depicted in the 2d drawing below. This would contain holes for an extention to fit in at four different sides. This did not seem interesting enough to me however, so I kept brainstorming.

I have always thought KNEX is really cool, because you are able to create something filling up half your room with elements which have a very small volume on their own. At the same time I realized mimicking some shape i knew would fit together would make the design process easier. I have always been fascinated with protein folding, and the stick-like structure of peptides resembles the KNEX i know and love. I knew there were multiple levels of protein folding, some of which are hard to understand even for huge machine learning models. However, I knew the secondary structure was relatively straightforeward. This was either an alpha helix (the shape of a helix) or a beta sheet (the shape of a sheet). I played around with the idea of making a building block which would be able to form both sheets and helixes, but I had no idea how to even check whether it would fold properly. So, I narrowed down my scope to a peptide chain which could form a beta sheet. To display that it was actually a molecule and not some connected  balls I decided to give the molecules a somewhat realistically scaled size, but the hydrogen atom had to be bigger because otherwise it would be too small. As it was quite a complex shape, I only knew how to make this using a 3d printer. This turned out to be hard still, because i had some trouble with creating the proper model in solidworks. However, after some time, I could print the blue balls. However, in typical tinker fashion there were two things I disliked about these balls. Firstly, the 3d printing support would not properly snap off, leaving some ugly parts as shown in the photos below. Secondly, the molecule was huge, and thus I felt somewhat guilty printing 4 of these so they would form a proper beta sheet. I decided to only print two molecules, which would still allow me to have them connect in the two ways which would form a sheet (through molecular bonds and H-bridges). I also talked with the designlab people for the second print, and they used a different kind of support for the second peptide i printed (the pink ones). For these, the support snapped of properly. Sadly some time later, I tore a ligament in my knee which made me somewhat clumsy when sitting down. Without looking, I sat on the pink peptide bond, which broke it apart... At the same time, the last of my glue was used to attach the magnets, so i could not repair this easily.
All in all, I would not call this a huge success. However, I think i actually learned some things. I have gotten better at solidworks modelling, and got some solidworks tips from a friend while working on this. Also, I was able to get some magnets from a different friend, because they were buying 100 pieces anyways. While this was somewhat outside of my software robotics programming comfort zone, it was not so frustrating because I was able to ask some friend for help whenever i got stuck (which gave me the necessary scaffolding to make this less frustrating). I think in the future I should keep more in mind that I can ask friends anytime for help, since people always like to help out with something they excel at.
